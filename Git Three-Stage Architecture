Git has a three-stage architecture, consisting of the working directory, the staging area, and the repository.

Working Directory:- the directory on a local machine where all the files and changes are stored.

1. The working directory is the area in Git where you can make changes to your files. It acts as a workspace for modifications and updates before they are ready to be committed.

2. In the working directory, users can create new files or modify existing ones according to their needs. This flexibility allows for efficient collaboration and version control among team members working on the same project.

3. One of the benefits of using a working directory is that it enables users to experiment with different versions or branches of code without affecting the main repository or impacting other contributors' work.

Staging Area:-

This is the area where developers can select which changes they want to include in the next commit. You might want certain files not to go for the commit, so simple, don't add those files to the staging area. The staging area is an intermediate step between the working directory and the repository, So that changes can be made in b/w & analysis can be done. But you might think can't we commit directly? Yes, There does exist A Command For This -> git commit -m “commit message” But It Doesn't mean that you are not staging the files, What We are doing is basically, we are skipping the git add command which would put files to the staging area.

Repository (git directory) :
The repository represents the last level of the Git architecture. Git's repository records the history of modifications to the codebase. It includes all codebase versions, both current and older. When a developer commits, Git extracts the changes from the staging area and generates a snapshot of the project, which is subsequently saved in the repository.

Git's three-stage design is an effective way to manage code changes and collaborate with team members. Using the working directory, staging area, and repository, developers may successfully manage changes and maintain version control.

Detail explanation of Repository, Commit, Tags, Snapshots, Push-Pull Mechanism, and Branching Strategy

Repository:

A repository, or "repo," is a site where your project's data and revision history are saved. It may be local (on your computer) or remote (on a server). Git repositories include information about your project, such as its history, branches, and tags.

Commit:

A commit in Git is a development milestone that encapsulates a coherent set of changes to the project. Before committing, updates are often staged using the "git add" command, which allows for the selective insertion of alterations. Once staged, the "git commit" command is used to permanently record the modifications. Each commit is recognised by a unique hash created from the commit's text and metadata. This hash secures the commit's integrity and allows you to quickly reference it. The commit message, which is added throughout the commit process, gives a succinct summary of the changes made.

Tags:

Tags in Git are static references to individual commits, allowing you to simply and permanently designate critical moments in a project's history. Unlike branches, which are dynamic and may be updated with new commits, tags are fixed to the commit for which they were generated. Tags are typically used to indicate significant milestones in a project's lifespan, such as software releases or stable versions. By assigning a tag to a single commit, developers may easily and reliably refer to that state of the codebase in the future.

Snapshots:

In Git, each commit is a snapshot of the complete project at a certain point in time. This differs from delta-based systems, which merely record changes made. Git's approach to snapshot storage is quick and efficient, allowing for simple branching and merging operations.

Push-Pull Mechanism:

In a distributed version control system like Git, the push-pull mechanism is fundamental to collaborative software development. This system allows developers to work on their local copies of a repository and then share and synchronize changes with others through remote repositories, facilitating teamwork and minimizing conflicts. Let's delve further into the push and pull processes:

Push: Uploading local changes to a remote repository

When a developer completes a set of changes locally and is ready to share them with the rest of the team, they initiate a push operation. This involves transferring their committed changes from the local repository to a remote repository, such as the one hosted on GitHub or another server.
The push operation updates the remote repository with the latest commits, making the changes available to other team members. It's an essential step in the collaborative workflow, ensuring that everyone has access to the most recent version of the codebase.
Pull: Fetching and incorporating changes from a remote repository into your local repository

On the flip side, when a developer wants to incorporate changes made by others into their local copy, they perform a pull operation. This involves fetching the latest changes from the remote repository and merging them into the local working copy.
The pull operation helps maintain consistency across all contributors by integrating changes seamlessly. It's a crucial step to avoid conflicts and keep everyone working on an up-to-date codebase.
Branching Strategy:

Branching allows you to diverge from the main line of development and continue working on features or fixes independently. A branching strategy defines how branches are created, named, and merged.
Common branching strategies include:
Feature Branching: Create a new branch for each feature, develop it, and merge it back into the main branch.
Gitflow Workflow: A more complex strategy involving master, develop, feature, release, and hotfix branches for a structured development and release process.
GitHub Flow: A simplified approach with only a main branch, focusing on continuous delivery and deploying directly from the main branch.
