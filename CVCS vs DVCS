CVCS (Centralized Version Control Systems) and DVCS (Distributed Version Control Systems) are two different paradigms for managing changes in software development.

CVCS, exemplified by SVN and CVS, is a centralized model where there is a central repository that stores the entire project history. Developers work on local copies of the repository and must be connected to the central server to perform most operations. Changes are committed as a whole file, and branching and merging can be more complex.

The centralized version control system has a severe disadvantage in that the central server serves as a single point of failure. This means that if the central server fails, the repository on the server is unreachable, and any modifications to the code cannot be recorded. Furthermore, in bigger teams, the central server and repository might cause a bottleneck. However, Distributed Version Control Systems provide a solution to this issue.

Hierarchical, distributed version control systems differ from centralized version control systems in that they are more egalitarian. The method is similar to a Centralised Version Control System: check out a copy of the repository, make changes, and then check it back in. The fundamental difference between the two is that centralized version control systems save the history of changes on a central server. In contrast, version control systems preserve the most recent version of the work and update the central server with the current changes.

In the event of a distributed version control system, each collaborator has access to the whole repository, including the complete revision history and commit data, on their local workstation. As a result, the collaborator can locally submit their code or new changesets to avoid failures caused by server breakdowns. Unlike centralized version control systems, the collaborator can make edits or contribute changes to the work while not online. When a feature or collection of changesets is complete, the collaborator can upload it to the central server as a batch. Furthermore, before finalizing and making their code public to the entire team, a collaborator may share it with select persons for input.

In summary, the main differences between CVCS and DVCS are the centralized vs distributed nature of the repositories, the ability to work offline and commit individual lines in DVCS, and the ease and cost of branching and merging.
